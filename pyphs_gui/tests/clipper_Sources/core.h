/*
    Copyright or (c) or Copr. Project-Team S3 (Sound Signals and Systems) and
    Analysis/Synthesis team, Laboratory of Sciences and Technologies of Music and
    Sound (UMR 9912), IRCAM-CNRS-UPMC, 1 place Igor Stravinsky, F-75004 Paris
    * contributors : Antoine Falaize, Thomas Helie,
    * corresponding contributor: antoine.falaize@ircam.fr
    * date: 2016/12/31 12:47:34

    This has been geerated by Py which purpose is to generate C++
    code for the simulation of multiphysics system described by graph structures.

    This software is governed by the CeCILL-B license under French law and
    abiding by the rules of distribution of free software.  You can  use,
    modify and/ or redistribute the software under the terms of the CeCILL-B
    license as circulated by CEA, CNRS and INRIA at the following URL
    "http://www.cecill.info".

    As a counterpart to the access to the source code and  rights to copy,
    modify and redistribute granted by the license, users are provided only
    with a limited warranty  and the software's author,  the holder of the
    economic rights, and the successive licensors  have only  limited liability.

    In this respect, the user's attention is drawn to the risks associated
    with loading,  using,  modifying and/or developing or reproducing the
    software by the user in light of its specific status of free software,
    that may mean  that it is complicated to manipulate,  and  that  also
    therefore means  that it is reserved for developers  and  experienced
    professionals having in-depth computer knowledge. Users are therefore
    encouraged to load and test the software's suitability as regards their
    requirements in conditions enabling the security of their systems and/or
    data to be ensured and,  more generally, to use and operate it in the
    same conditions as regards security.

    The fact that you are presently reading this means that you have had
    knowledge of the CeCILL-B license and that you accept its terms.

    Created on 2016/12/31 12:47:34

    author: Antoine Falaize


===========================================================================

    This file was automatically generated by Py, date 2017/11/14 23:04:19.

    It contains the code for the simulation of system 'CLIPPER'.

===========================================================================
*/


#ifndef CLIPPER_H
#define CLIPPER_H

#include <iostream>
#include <vector>
#include <cmath>
#include <Eigen/Dense>
#include "parameters.h"



using namespace std;
using namespace Eigen;

class CLIPPER {
//==========================================================================
// PUBLIC    
    public:
    //==========================================================================
    // Sample Rate
    void set_sampleRate(float &);
    void set_sampleRate(double &);
    //==========================================================================
    // Core update
    void update();
    //==========================================================================
    // Acessors to Arguments, return vector<float>
    vector<float> x_vector() const;
    vector<float> dx_vector() const;
    vector<float> w_vector() const;
    vector<float> u_vector() const;
    vector<float> p_vector() const;
    vector<float> vl_vector() const;
    vector<float> vnl_vector() const;
    vector<float> o_vector() const;
    //==========================================================================
    // Acessors to Arguments, return Matrix<float, n, m>
    Matrix<float,1, 1> x() const;
    Matrix<float,1, 1> dx() const;
    Matrix<float,3, 1> w() const;
    Matrix<float,2, 1> u() const;
    Matrix<float,0, 0> p() const;
    Matrix<float,3, 1> vl() const;
    Matrix<float,1, 1> vnl() const;
    Matrix<float,0, 0> o() const;
    //==========================================================================
    // Mutators for Arguments, type = vector<float>
    void set_x(vector<float> &);
    void set_dx(vector<float> &);
    void set_w(vector<float> &);
    void set_u(vector<float> &);
    void set_p(vector<float> &);
    void set_vl(vector<float> &);
    void set_vnl(vector<float> &);
    void set_o(vector<float> &);
    //==========================================================================
    // Mutators for Arguments, type = Matrix<float, n, m>
    void set_x(Matrix<float, 1, 1> &);
    void set_dx(Matrix<float, 1, 1> &);
    void set_w(Matrix<float, 3, 1> &);
    void set_u(Matrix<float, 2, 1> &);
    void set_p(Matrix<float, 0, 0> &);
    void set_vl(Matrix<float, 3, 1> &);
    void set_vnl(Matrix<float, 1, 1> &);
    void set_o(Matrix<float, 0, 0> &);
    //==========================================================================
    // Mutators for a single argument, types are float with int index
    void set_x(float &, unsigned int &);
    void set_dx(float &, unsigned int &);
    void set_w(float &, unsigned int &);
    void set_u(float &, unsigned int &);
    void set_p(float &, unsigned int &);
    void set_vl(float &, unsigned int &);
    void set_vnl(float &, unsigned int &);
    void set_o(float &, unsigned int &);
    //==========================================================================
    // Functions Results Accessors (matrix)
    Matrix<float,0, 0> ud_o() const;
    Matrix<float,3, 3> jactempFll() const;
    Matrix<float,3, 1> Gl() const;
    Matrix<float,1, 3> jactempFnll() const;
    Matrix<float,1, 1> Gnl() const;
    Matrix<float,3, 1> jacGlnl() const;
    Matrix<float,1, 1> jacGnlnl() const;
    Matrix<float,1, 1> dxH() const;
    Matrix<float,3, 1> z() const;
    Matrix<float,2, 1> y() const;
    //==========================================================================
    // Functions Results Accessors (vector)
    vector<float> ud_o_vector() const;
    vector<float> jactempFll_vector() const;
    vector<float> Gl_vector() const;
    vector<float> jactempFnll_vector() const;
    vector<float> Gnl_vector() const;
    vector<float> jacGlnl_vector() const;
    vector<float> jacGnlnl_vector() const;
    vector<float> dxH_vector() const;
    vector<float> z_vector() const;
    vector<float> y_vector() const;
    //==========================================================================
    // Functions Results Accessors (element)
    float ud_o(unsigned int &) const;
    float jactempFll(unsigned int &) const;
    float Gl(unsigned int &) const;
    float jactempFnll(unsigned int &) const;
    float Gnl(unsigned int &) const;
    float jacGlnl(unsigned int &) const;
    float jacGnlnl(unsigned int &) const;
    float dxH(unsigned int &) const;
    float z(unsigned int &) const;
    float y(unsigned int &) const;
    //==========================================================================
    // Oprations Results Accessors
    Matrix<float,1, 1> ud_x() const;
    Matrix<float,3, 3> ijactempFll() const;
    Matrix<float,3, 1> ud_vl() const;
    Matrix<float,1, 1> Fnl() const;
    Matrix<float,1, 1> jacFnl() const;
    Matrix<float,1, 1> ijacFnl() const;
    Matrix<float,1, 1> save_Fnl() const;
    float res_Fnl() const;
    float step_Fnl() const;
    Matrix<float,1, 1> ud_vnl() const;
    //==========================================================================
    // Oprations Results Accessors
    vector<float> ud_x_vector() const;
    vector<float> ud_vl_vector() const;
    vector<float> Fnl_vector() const;
    vector<float> save_Fnl_vector() const;
    vector<float> ud_vnl_vector() const;
    //==========================================================================
    // Default Constructor
    CLIPPER();
    //==========================================================================
    // Default Destructor
    ~CLIPPER();

//==========================================================================
// PRIVATE    
    private:
    //==========================================================================
    // Sample Rate
    float sampleRate = 48000.0;
    const float * F_S = & sampleRate;
    //==========================================================================
    // Parameters
    const unsigned int indexParameters = 0;  // See file "parameters.cpp".
    const float * Csymbol = & subs[indexParameters][0];
    const float * Is = & subs[indexParameters][1];
    const float * Rd = & subs[indexParameters][2];
    const float * v0 = & subs[indexParameters][3];
    const float * mu = & subs[indexParameters][4];
    const float * gmin = & subs[indexParameters][5];
    //==========================================================================
    // Arguments
    Matrix<float,7, 1> args;
    float * xC = & args(0, 0);
    float * dxC = & args(1, 0);
    float * wd2_R = & args(2, 0);
    float * wd2_gmin = & args(3, 0);
    float * wd2 = & args(4, 0);
    float * uoutput = & args(5, 0);
    float * uinput = & args(6, 0);
    //==========================================================================
    // Functions Results Definitions
    Matrix<float,0, 0> _ud_o;
    Matrix<float,3, 3> _jactempFll;
    Matrix<float,3, 1> _Gl;
    Matrix<float,1, 3> _jactempFnll;
    Matrix<float,1, 1> _Gnl;
    Matrix<float,3, 1> _jacGlnl;
    Matrix<float,1, 1> _jacGnlnl;
    Matrix<float,1, 1> _dxH;
    Matrix<float,3, 1> _z;
    Matrix<float,2, 1> _y;
    //==========================================================================
    // Functions Results Updates
    void ud_o_update();
    void jactempFll_update();
    void Gl_update();
    void jactempFnll_update();
    void Gnl_update();
    void jacGlnl_update();
    void jacGnlnl_update();
    void dxH_update();
    void z_update();
    void y_update();
    //==========================================================================
    // Operations Results Definition
    Matrix<float,1, 1> _ud_x;
    Matrix<float,3, 3> _ijactempFll;
    Matrix<float,3, 1> _ud_vl;
    Matrix<float,1, 1> _Fnl;
    Matrix<float,1, 1> _jacFnl;
    Matrix<float,1, 1> _ijacFnl;
    Matrix<float,1, 1> _save_Fnl;
    float _res_Fnl;
    float _step_Fnl;
    Matrix<float,1, 1> _ud_vnl;
    //==========================================================================
    // Oprations Results Updates
    void ud_x_update();
    void ijactempFll_update();
    void ud_vl_update();
    void Fnl_update();
    void jacFnl_update();
    void ijacFnl_update();
    void save_Fnl_update();
    void res_Fnl_update();
    void step_Fnl_update();
    void ud_vnl_update();
    //==========================================================================
    // Initialization
    void init();
};

#endif /* CLIPPER_H */
