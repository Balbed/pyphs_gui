,
          noParameterLabel ("noparam", "No parameters available")
{

    const OwnedArray<AudioProcessorParameter>& params = p.getParameters();

    for (int i = 0; i < params.size(); ++i)
    {
        if (const AudioParameterFloat* param = dynamic_cast<AudioParameterFloat*> (params[i]))
        {
            Slider* aSlider;

            paramSliders.add (aSlider = new Slider (param->name));
            aSlider->setRange (param->range.start, param->range.end);
            aSlider->setSliderStyle (Slider::LinearHorizontal);
            aSlider->setValue (*param);

            aSlider->addListener (this);
            addAndMakeVisible (aSlider);

            Label* aLabel;
            paramLabels.add (aLabel = new Label (param->name, param->name));
            addAndMakeVisible (aLabel);
        }
    }

    //=========================================================================
    // Place No-Parameter Label
    noParameterLabel.setJustificationType (Justification::horizontallyCentred | Justification::verticallyCentred);
    noParameterLabel.setFont (noParameterLabel.getFont().withStyle (Font::italic));

    //=========================================================================
    // Set window size
    setSize (kParamSliderWidth + kParamLabelWidth,
             jmax (1, kParamControlHeight * paramSliders.size()));

    //=========================================================================
    // Start Timer
    if (paramSliders.size() == 0)
        addAndMakeVisible (noParameterLabel);
    else
        startTimer (100);
}
